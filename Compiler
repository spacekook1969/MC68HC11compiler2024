# 1. Leer archivo .asc y procesar línea por línea
def leer_archivo_asc(ruta):
    with open(ruta, 'r', encoding='ansi') as archivo:
        lineas = archivo.readlines()
    return lineas

# 2. Analizar cada línea
def analizar_linea(linea):
    # Ignorar comentarios y separar por espacios
    linea_sin_comentario = linea.split(';')[0].strip()
    tokens = linea_sin_comentario.split()
    return tokens

# 3. Generar archivos .LST y .S19
def generar_archivo_lst(tokens, direccion, archivo_lst):
    """ Genera el archivo LST con la dirección de memoria, opcodes y el ensamblado original.  """
    # Dirección de memoria en hexadecimal
    direccion_hex = f"{direccion:04X}"
    modo = identificar_modo_direccionamiento(tokens['operando'])
    
    # Obtener el opcode en hexadecimal
    opcode_hex = f"{MNEMONICOS[tokens['mnemotico']][modo]:02X}"
    
    # Construir línea de salida en el archivo LST
    linea_lst = f"{direccion_hex} {opcode_hex} ; {tokens['mnemotico']} {tokens['operando']}\n"
    
    # Escribir línea en el archivo LST
    archivo_lst.write(linea_lst)
def convertir_opcodes_a_enteros(opcodes_hex):
    """
    Convierte una lista de opcodes en formato hexadecimal a enteros.
    """
    codigo_objeto = []
    for opcode_hex in opcodes_hex:
        # Convertir opcode hexadecimal a entero y agregar a codigo_objeto
        codigo_objeto.append(int(opcode_hex, 16))
    return codigo_objeto

def generar_archivo_s19(codigo_objeto, archivo_s19):
    """
    Genera el archivo S19 en formato Motorola para el código objeto.
    """
    direccion_inicial = 0x0000
    for i in range(0, len(codigo_objeto), 16):
        datos = codigo_objeto[i:i + 16]
        longitud = len(datos) + 3  # 3 bytes adicionales: dirección (2) + checksum (1)
        direccion = direccion_inicial + i
        suma_verificacion = longitud + (direccion >> 8) + (direccion & 0xFF) + sum(datos)
        suma_verificacion = (~suma_verificacion) & 0xFF

        # Crear registro S19
        registro = f"S1{longitud:02X}{direccion:04X}" + ''.join(f"{byte:02X}" for byte in datos) + f"{suma_verificacion:02X}\n"
        archivo_s19.write(registro)

    # Añadir registro de fin de archivo
    archivo_s19.write("S9\n")

# Lista de opcodes en formato hexadecimal (ejemplo)
opcodes_hex = ["1A", "2B", "3C"]  # Reemplaza con tus opcodes reales

# Convertir los opcodes a enteros
codigo_objeto = convertir_opcodes_a_enteros(opcodes_hex)

# Generar el archivo S19 con el código objeto convertido
with open("archivo.s19", "w") as archivo_s19:
    generar_archivo_s19(codigo_objeto, archivo_s19)


# 4. Detectar errores y verificar la sintaxis
def verificar_errores(tokens):
    if tokens['mnemotico'] not in MNEMONICOS:
        print(f"Error: Mnemónico desconocido '{tokens['mnemotico']}' en la línea.")
        return False
    modo = identificar_modo_direccionamiento(tokens['operando'])
    if modo not in MNEMONICOS[tokens['mnemotico']]:
        print(f"Error: Modo de direccionamiento inválido para '{tokens['mnemotico']}'.")
        return False
    return True


# 5. Compilador principal
def compilador_mc68hc11(ruta_archivo):
    # Abrir archivo de entrada y los archivos de salida .LST y .S19
    with open(ruta_archivo, 'r') as archivo_entrada, \
         open("salida.lst", 'w') as archivo_lst, \
         open("salida.s19", 'w') as archivo_s19:
        
        direccion_actual = 0x0000  # Dirección de inicio de código objeto
        codigo_objeto = []  # Lista para almacenar el código objeto



        for linea in archivo_entrada:
            tokens = analizar_linea(linea)
            if tokens:
                if not verificar_errores(tokens):
                    continue  # Saltar a la siguiente línea si hay un error

                # Generar la salida LST
                generar_archivo_lst(tokens, direccion_actual, archivo_lst)

                # Agregar opcode a código objeto
                codigo_objeto.append(tokens['opcode'])

                # Incrementar dirección (cada instrucción ocupa 1 byte en este ejemplo)
                direccion_actual += 1

        # Generar archivo S19
        generar_archivo_s19(codigo_objeto, archivo_s19)


    print("Compilación completada. Archivos 'salida.lst' y 'salida.s19' generados.")



# 6. Mnemónicos y códigos de operación para el MC68HC11
MNEMONICOS = {
    # Carga y almacenamiento
    "LDAA": {"inmediato": 0x86, "directo": 0x96, "extendido": 0xB6, "indexado": 0xA6},
    "LDAB": {"inmediato": 0xC6, "directo": 0xD6, "extendido": 0xF6, "indexado": 0xE6},
    "STAA": {"directo": 0x97, "extendido": 0xB7, "indexado": 0xA7},
    "STAB": {"directo": 0xD7, "extendido": 0xF7, "indexado": 0xE7},
    "LDX": {"inmediato": 0xCE, "directo": 0xDE, "extendido": 0xFE, "indexado": 0xEE},
    "STX": {"directo": 0xDF, "extendido": 0xFF, "indexado": 0xEF},
    "LDY": {"inmediato": 0x18CE, "directo": 0x18DE, "extendido": 0x18FE, "indexado": 0x18EE},
    "STY": {"directo": 0x18DF, "extendido": 0x18FF, "indexado": 0x18EF},
    
    # Aritmética
    "ADDA": {"inmediato": 0x8B, "directo": 0x9B, "extendido": 0xBB, "indexado": 0xAB},
    "ADDB": {"inmediato": 0xCB, "directo": 0xDB, "extendido": 0xFB, "indexado": 0xEB},
    "SUBA": {"inmediato": 0x80, "directo": 0x90, "extendido": 0xB0, "indexado": 0xA0},
    "SUBB": {"inmediato": 0xC0, "directo": 0xD0, "extendido": 0xF0, "indexado": 0xE0},
    "MUL": {"inherente": 0x3D},
    "DIV": {"inherente": 0x8D},
    
    # Comparación
    "CMPA": {"inmediato": 0x81, "directo": 0x91, "extendido": 0xB1, "indexado": 0xA1},
    "CMPB": {"inmediato": 0xC1, "directo": 0xD1, "extendido": 0xF1, "indexado": 0xE1},
    "CPX": {"inmediato": 0x8C, "directo": 0x9C, "extendido": 0xBC, "indexado": 0xAC},
    "CPY": {"inmediato": 0x18AC, "directo": 0x18BC, "extendido": 0x18DC, "indexado": 0x18CC},
    
    # Lógica
    "ANDA": {"inmediato": 0x84, "directo": 0x94, "extendido": 0xB4, "indexado": 0xA4},
    "ANDB": {"inmediato": 0xC4, "directo": 0xD4, "extendido": 0xF4, "indexado": 0xE4},
    "ORA": {"inmediato": 0x8A, "directo": 0x9A, "extendido": 0xBA, "indexado": 0xAA},
    "ORB": {"inmediato": 0xCA, "directo": 0xDA, "extendido": 0xFA, "indexado": 0xEA},
    "EORA": {"inmediato": 0x88, "directo": 0x98, "extendido": 0xB8, "indexado": 0xA8},
    "EORB": {"inmediato": 0xC8, "directo": 0xD8, "extendido": 0xF8, "indexado": 0xE8},
    
    # Desplazamiento
    "LSR": {"directo": 0x44, "extendido": 0x74, "indexado": 0x64},
    "ASR": {"directo": 0x47, "extendido": 0x77, "indexado": 0x67},
    "LSL": {"directo": 0x48, "extendido": 0x78, "indexado": 0x68},
    "ROL": {"directo": 0x49, "extendido": 0x79, "indexado": 0x69},
    
    # Saltos y llamadas
    "JMP": {"extendido": 0x7E, "indexado": 0x6E},
    "JSR": {"extendido": 0xBD, "indexado": 0xAD},
    "RTS": {"inherente": 0x39},
    "BRA": {"relativo": 0x20},
    "BSR": {"relativo": 0x8D},
    "BEQ": {"relativo": 0x27},
    "BNE": {"relativo": 0x26},
    "BCC": {"relativo": 0x24},
    "BCS": {"relativo": 0x25},
    "BHI": {"relativo": 0x22},
    "BLS": {"relativo": 0x23},
    
    # Control
    "NOP": {"inherente": 0x01},
    "SEI": {"inherente": 0x0B},
    "CLI": {"inherente": 0x0A},
    "SWI": {"inherente": 0x3F},
    "TAP": {"inherente": 0x06},
    "TPA": {"inherente": 0x07},
    "TSX": {"inherente": 0x30},
    "TXS": {"inherente": 0x35},
    "TSTA": {"inherente": 0x4D},
    "TSTB": {"inherente": 0x5D},
    "INCA": {"inherente": 0x4C},
    "DECA": {"inherente": 0x4A},
    "INCB": {"inherente": 0x5C},
    "DECB": {"inherente": 0x5A},
    "PSHA": {"inherente": 0x36},
    "PULA": {"inherente": 0x32},
    "PSHB": {"inherente": 0x37},
    "PULB": {"inherente": 0x33},
    
    # Transferencia
    "TAB": {"inherente": 0x16},
    "TBA": {"inherente": 0x17},
    "XGDX": {"inherente": 0x8F},
    "XGDY": {"inherente": 0x18AF},
}


# 7.  Soporte para Modos de Direccionamiento
def identificar_modo_direccionamiento(operando):
    if operando.startswith('#'):
        return "inmediato"
    elif operando.endswith(',X'):
        return "indexado"
    elif operando == "":
        return "inherente"
    elif len(operando) <= 2:  # Asume direccionamiento directo si el operando tiene 1 byte
        return "directo"
    else:
        return "extendido"
