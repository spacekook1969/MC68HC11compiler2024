from termcolor import colored

# Función para leer el archivo fuente (.asc) y procesar línea por línea
def leer_archivo_asc(ruta):
    try:
        with open(ruta, 'r', encoding='ansi') as archivo:
            lineas = archivo.readlines()
        return lineas
    except FileNotFoundError:
        print(f"Error: No se encontró el archivo '{ruta}'.")
        return []
    except Exception as e:
        print(f"Error al leer el archivo: {e}")
        return []

# Función para analizar cada línea del archivo fuente
def analizar_linea(linea):
    linea_sin_comentario = linea.split(';')[0].strip()  # Ignorar comentarios
    if not linea_sin_comentario:  # Saltar líneas vacías
        return None
    tokens = linea_sin_comentario.split()
    if len(tokens) == 1:  # Sólo mnemónico
        return {"mnemotico": tokens[0], "operando": None}
    elif len(tokens) > 1:  # Mnemónico y operando
        return {"mnemotico": tokens[0], "operando": tokens[1]}
    return None

# Función para identificar el modo de direccionamiento
def identificar_modo_direccionamiento(operando):
    if operando is None:
        return "inherente"
    elif operando.startswith("#"):
        return "inmediato"
    elif operando.isdigit():
        return "directo"
    elif "," in operando:
        return "indexado"
    else:
        return "extendido"

# Función para verificar errores en la instrucción
def verificar_errores(tokens):
    if tokens['mnemotico'] not in MNEMONICOS:
        print(f"Error: Mnemónico desconocido '{tokens['mnemotico']}'.")
        return False
    modo = identificar_modo_direccionamiento(tokens['operando'])
    if modo not in MNEMONICOS[tokens['mnemotico']]:
        print(f"Error: Modo de direccionamiento inválido para '{tokens['mnemotico']}'.")
        return False
    return True

# Función para escribir en el archivo de salida .LST con colores
def generar_archivo_lst_color(tokens, direccion, archivo_lst):
    direccion_hex = f"{direccion:04X}"
    modo = identificar_modo_direccionamiento(tokens['operando'])
    
    # Verificar si el mnemónico y modo existen
    if tokens['mnemotico'] not in MNEMONICOS or modo not in MNEMONICOS[tokens['mnemotico']]:
        opcode_hex = "??"  # Indicar error con ??
    else:
        opcode_hex = f"{MNEMONICOS[tokens['mnemotico']][modo]:02X}"
    
    # Construir la línea del archivo .LST con colores
    operando_str = tokens['operando'] or ''
    linea_lst = (
        colored(f"{direccion_hex}", "cyan") + " " + 
        colored(f"{opcode_hex}", "yellow") + " ; " +
        colored(tokens['mnemotico'], "green") + " " +
        colored(operando_str, "magenta") + "\n"
    )
    
    archivo_lst.write(linea_lst)

# Función para generar el archivo S19 en formato Motorola
def generar_archivo_s19(codigo_objeto, archivo_s19):
    direccion_inicial = 0x0000
    for i in range(0, len(codigo_objeto), 16):
        datos = codigo_objeto[i:i + 16]
        longitud = len(datos) + 3  # Longitud = datos + dirección + checksum
        direccion = direccion_inicial + i
        suma_verificacion = longitud + (direccion >> 8) + (direccion & 0xFF) + sum(datos)
        suma_verificacion = (~suma_verificacion) & 0xFF

        # Crear el registro S1
        registro = f"S1{longitud:02X}{direccion:04X}" + ''.join(f"{byte:02X}" for byte in datos) + f"{suma_verificacion:02X}\n"
        archivo_s19.write(registro)

    # Agregar registro de fin de archivo
    archivo_s19.write("S9\n")

# Función principal del compilador
def compilador_mc68hc11(ruta_archivo):
    lineas = leer_archivo_asc(ruta_archivo)
    if not lineas:
        return

    try:
        with open("salida.lst", 'w') as archivo_lst, open("salida.s19", 'w') as archivo_s19:
            direccion_actual = 0x0000
            codigo_objeto = []

            for linea in lineas:
                tokens = analizar_linea(linea)
                if not tokens:  # Saltar líneas vacías o comentarios
                    continue

                if not verificar_errores(tokens):  # Reportar errores en la línea
                    continue

                # Generar el archivo LST con colores
                generar_archivo_lst_color(tokens, direccion_actual, archivo_lst)
                
                # Obtener el opcode y agregar al código objeto
                modo = identificar_modo_direccionamiento(tokens['operando'])
                opcode = MNEMONICOS[tokens['mnemotico']][modo]
                codigo_objeto.append(opcode)
                
                direccion_actual += 1

            # Generar el archivo S19
            generar_archivo_s19(codigo_objeto, archivo_s19)

        print("Compilación completada. Archivos 'salida.lst' y 'salida.s19' generados.")
    except Exception as e:
        print(f"Error durante la compilación: {e}")

# Diccionario de mnemónicos y opcodes 
MNEMONICOS = {
    "ABA": {"inherente": 0x1B},
    "ADCA": {"inmediato": 0x89, "directo": 0x99, "extendido": 0xB9, "indexado": 0xA9},
    "ADCB": {"inmediato": 0xC9, "directo": 0xD9, "extendido": 0xF9, "indexado": 0xE9},
    "ADDA": {"inmediato": 0x8B, "directo": 0x9B, "extendido": 0xBB, "indexado": 0xAB},
    "ADDB": {"inmediato": 0xCB, "directo": 0xDB, "extendido": 0xFB, "indexado": 0xEB},
    "ANDA": {"inmediato": 0x84, "directo": 0x94, "extendido": 0xB4, "indexado": 0xA4},
    "ANDB": {"inmediato": 0xC4, "directo": 0xD4, "extendido": 0xF4, "indexado": 0xE4},
    "ASL": {"directo": 0x08, "indexado": 0x68, "extendido": 0x78},
    "ASLA": {"inherente": 0x48},
    "ASLB": {"inherente": 0x58},
    "ASR": {"directo": 0x07, "indexado": 0x67, "extendido": 0x77},
    "ASRA": {"inherente": 0x47},
    "ASRB": {"inherente": 0x57},
    "BCC": {"relativo": 0x24},
    "BCS": {"relativo": 0x25},
    "BEQ": {"relativo": 0x27},
    "BGE": {"relativo": 0x2C},
    "BGT": {"relativo": 0x2E},
    "BHI": {"relativo": 0x22},
    "BITA": {"inmediato": 0x85, "directo": 0x95, "extendido": 0xB5, "indexado": 0xA5},
    "BITB": {"inmediato": 0xC5, "directo": 0xD5, "extendido": 0xF5, "indexado": 0xE5},
    "BLE": {"relativo": 0x2F},
    "BLS": {"relativo": 0x23},
    "BLT": {"relativo": 0x2D},
    "BMI": {"relativo": 0x2B},
    "BNE": {"relativo": 0x26},
    "BPL": {"relativo": 0x2A},
    "BRA": {"relativo": 0x20},
    "BRCLR": {"directo": 0x0F},
    "BRSET": {"directo": 0x0E},
    "BSR": {"relativo": 0x8D},
    "CBA": {"inherente": 0x11},
    "CLC": {"inherente": 0x0C},
    "CLI": {"inherente": 0x0E},
    "CLR": {"directo": 0x0F, "indexado": 0x6F, "extendido": 0x7F},
    "CLRA": {"inherente": 0x4F},
    "CLRB": {"inherente": 0x5F},
    "CMPA": {"inmediato": 0x81, "directo": 0x91, "extendido": 0xB1, "indexado": 0xA1},
    "CMPB": {"inmediato": 0xC1, "directo": 0xD1, "extendido": 0xF1, "indexado": 0xE1},
    "COM": {"directo": 0x03, "indexado": 0x63, "extendido": 0x73},
    "COMA": {"inherente": 0x43},
    "COMB": {"inherente": 0x53},
    "CPD": {"inmediato": 0x83, "directo": 0x93, "extendido": 0xB3, "indexado": 0xA3},
    "CPX": {"inmediato": 0x8C, "directo": 0x9C, "extendido": 0xBC, "indexado": 0xAC},
    "DEC": {"directo": 0x0A, "indexado": 0x6A, "extendido": 0x7A},
    "DECA": {"inherente": 0x4A},
    "DECB": {"inherente": 0x5A},
    "EORA": {"inmediato": 0x88, "directo": 0x98, "extendido": 0xB8, "indexado": 0xA8},
    "EORB": {"inmediato": 0xC8, "directo": 0xD8, "extendido": 0xF8, "indexado": 0xE8},
    "INC": {"directo": 0x0C, "indexado": 0x6C, "extendido": 0x7C},
    "INCA": {"inherente": 0x4C},
    "INCB": {"inherente": 0x5C},
    "JMP": {"directo": 0x0E, "indexado": 0x6E, "extendido": 0x7E},
    "JSR": {"directo": 0x9D, "indexado": 0xAD, "extendido": 0xBD},
    "LDAA": {"inmediato": 0x86, "directo": 0x96, "extendido": 0xB6, "indexado": 0xA6},
    "LDAB": {"inmediato": 0xC6, "directo": 0xD6, "extendido": 0xF6, "indexado": 0xE6},
    "LDD": {"inmediato": 0xCC, "directo": 0xDC, "extendido": 0xFC, "indexado": 0xEC},
    "LDX": {"inmediato": 0xCE, "directo": 0xDE, "extendido": 0xFE, "indexado": 0xEE},
    "NEG": {"directo": 0x00, "indexado": 0x60, "extendido": 0x70},
    "NEGA": {"inherente": 0x40},
    "NEGB": {"inherente": 0x50},
    "NOP": {"inherente": 0x01},
    "ORA": {"inmediato": 0x8A, "directo": 0x9A, "extendido": 0xBA, "indexado": 0xAA},
    "ORB": {"inmediato": 0xCA, "directo": 0xDA, "extendido": 0xFA, "indexado": 0xEA},
    "PSHA": {"inherente": 0x36},
    "PSHB": {"inherente": 0x37},
    "RTS": {"inherente": 0x39},
    "SBA": {"inherente": 0x10},
    "STA": {"directo": 0x97, "extendido": 0xB7, "indexado": 0xA7},
    "STX": {"directo": 0x9F, "extendido": 0xBF, "indexado": 0xAF},
    "SUBA": {"inmediato": 0x80, "directo": 0x90, "extendido": 0xB0, "indexado": 0xA0},
    "SUBB": {"inmediato": 0xC0, "directo": 0xD0, "extendido": 0xF0, "indexado": 0xE0},
    "SWI": {"inherente": 0x3F},
    "TBA": {"inherente": 0x17},
    "TST": {"directo": 0x0D, "indexado": 0x6D, "extendido": 0x7D},
    "TSTA": {"inherente": 0x4D},
    "TSTB": {"inherente": 0x5D},
    "TSX": {"inherente": 0x30},
    "TXS": {"inherente": 0x35},
}


# Ejecución del compilador
if __name__ == "__main__":
    ruta_archivo = input("Ingrese la ruta del archivo .asc: ")
    compilador_mc68hc11(ruta_archivo)
